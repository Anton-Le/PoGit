/* Copyright 2014-2018 Axel Huebl, Alexander Debus, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file fieldBackground.param
 *
 * Load external background fields
 */

#pragma once

namespace picongpu
{
    class FieldBackgroundE
    {
    public:
        static constexpr bool InfluenceParticlePusher = false;
        PMACC_ALIGN(m_unitField, const float3_64);

        HDINLINE FieldBackgroundE( const float3_64 unitField ) : m_unitField(unitField)
        {}

        HDINLINE float3_X
        operator()( const DataSpace<simDim>& cellIdx,
                    const uint32_t currentStep ) const
        {
            constexpr float_64 period_SI(20.0e-6);
            const float_64 y_SI = cellIdx.y() * SI::CELL_HEIGHT_SI;
            const float_X sinArg = precisionCast<float_X>( y_SI / period_SI * 2.0 * PI );
            return float3_X(0.0, math::sin( sinArg ) / m_unitField[1], 0.0);
        }
    };

    class FieldBackgroundB
    {
    public:
        static constexpr bool InfluenceParticlePusher = false;
        PMACC_ALIGN(m_unitField, const float3_64);

        HDINLINE FieldBackgroundB( const float3_64 unitField ) : m_unitField(unitField)
        {}
        HDINLINE float3_X
        operator()( const DataSpace<simDim>& cellIdx,
                    const uint32_t currentStep ) const
        {
            constexpr float_64 period_SI(20.0e-6);
            const float_64 y_SI = cellIdx.y() * SI::CELL_HEIGHT_SI;
            const float_X sinArg = precisionCast<float_X>( y_SI / period_SI * 2.0 * PI );
            return float3_X(0.0, math::cos( sinArg ) / m_unitField[1], 0.0);
        }
    };

    class FieldBackgroundJ
    {
    public:
        static constexpr bool activated = true;
        PMACC_ALIGN(m_unitField, const float3_64);
        HDINLINE FieldBackgroundJ( const float3_64 unitField ) : m_unitField(unitField)
        {}

        HDINLINE float3_X
        operator()( const DataSpace<simDim>& cellIdx,
                    const uint32_t currentStep ) const
        {
            float_64 current_comp_1 = 0.0;
            float_64 current_comp_2 = 0.0;
            ${Antenna}

            return float3_X( precisionCast<float_X>(current_comp_1) / m_unitField.x(), 0.0, precisionCast<float_X>(current_comp_2) / m_unitField.z() );
        }
    };

} // namespace picongpu
